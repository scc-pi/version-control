{
  "hash": "5353ee58ad1d61a22eff62bf38a54e6f",
  "result": {
    "markdown": "# Secrets\n\nThe best way to avoid leaking secrets is to store them in local files. These can then be excluded from Git tracking with a `.gitignore` file. More likely and safer still, they will be stored within an IDEâ€˜s folder structure (e.g. `.Renviron`) so that they are available across projects and are not exposed to specific project directories and version control.  \n\n## Passwords & RStudio\n\nIt's poor practice to include login details in code. One option is using the `.Renviron` file for [securing credentials](https://db.rstudio.com/best-practices/managing-credentials/#use-environment-variables). `usethis::edit_r_environ()` will open your user `.Renviron`.\n\nIf you're sharing the script, you can anticipate that the environment variable might not be set and use the RStudio API to prompt for credentials. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Connect to OSCAR database via ODBC DSN\noscar_con <- DBI::dbConnect(\n  odbc::odbc(),\n  dsn = \"OSCAR\",\n  UID = if (Sys.getenv(\"oscar_userid\") == \"\") {\n    rstudioapi::askForPassword(\"OSCAR User ID\")\n  } else {\n    Sys.getenv(\"oscar_userid\")\n  },\n  PWD = if (Sys.getenv(\"oscar_pwd\") == \"\") {\n    rstudioapi::askForPassword(\"OSCAR Password\")\n  } else {\n    Sys.getenv(\"oscar_pwd\")\n  },\n  timeout = 10\n)\n```\n:::\n\n\nNote that including all the connection logic within a single statement works well with the RStudio *Connections* tab. \n\n\n## ToDo\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}